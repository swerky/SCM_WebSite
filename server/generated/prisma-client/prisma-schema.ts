// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateEvent {
  count: Int!
}

type AggregateNews {
  count: Int!
}

type AggregatePrices {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Event {
  id: ID!
  name: String!
  location: String!
  transport: Transport
  appointment: String!
  prices(where: PricesWhereInput, orderBy: PricesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prices!]
  endInscription: DateTime!
  startInscription: DateTime!
  start: DateTime!
  end: DateTime!
  organizers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  picture: String!
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  name: String!
  location: String!
  transport: Transport
  appointment: String!
  prices: PricesCreateManyWithoutEventInput
  endInscription: DateTime!
  startInscription: DateTime!
  start: DateTime!
  end: DateTime!
  organizers: UserCreateManyInput
  picture: String!
}

input EventCreateOneInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutPricesInput {
  create: EventCreateWithoutPricesInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutPricesInput {
  id: ID
  name: String!
  location: String!
  transport: Transport
  appointment: String!
  endInscription: DateTime!
  startInscription: DateTime!
  start: DateTime!
  end: DateTime!
  organizers: UserCreateManyInput
  picture: String!
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  location_ASC
  location_DESC
  transport_ASC
  transport_DESC
  appointment_ASC
  appointment_DESC
  endInscription_ASC
  endInscription_DESC
  startInscription_ASC
  startInscription_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  picture_ASC
  picture_DESC
}

type EventPreviousValues {
  id: ID!
  name: String!
  location: String!
  transport: Transport
  appointment: String!
  endInscription: DateTime!
  startInscription: DateTime!
  start: DateTime!
  end: DateTime!
  picture: String!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateDataInput {
  name: String
  location: String
  transport: Transport
  appointment: String
  prices: PricesUpdateManyWithoutEventInput
  endInscription: DateTime
  startInscription: DateTime
  start: DateTime
  end: DateTime
  organizers: UserUpdateManyInput
  picture: String
}

input EventUpdateInput {
  name: String
  location: String
  transport: Transport
  appointment: String
  prices: PricesUpdateManyWithoutEventInput
  endInscription: DateTime
  startInscription: DateTime
  start: DateTime
  end: DateTime
  organizers: UserUpdateManyInput
  picture: String
}

input EventUpdateManyMutationInput {
  name: String
  location: String
  transport: Transport
  appointment: String
  endInscription: DateTime
  startInscription: DateTime
  start: DateTime
  end: DateTime
  picture: String
}

input EventUpdateOneRequiredInput {
  create: EventCreateInput
  update: EventUpdateDataInput
  upsert: EventUpsertNestedInput
  connect: EventWhereUniqueInput
}

input EventUpdateOneRequiredWithoutPricesInput {
  create: EventCreateWithoutPricesInput
  update: EventUpdateWithoutPricesDataInput
  upsert: EventUpsertWithoutPricesInput
  connect: EventWhereUniqueInput
}

input EventUpdateWithoutPricesDataInput {
  name: String
  location: String
  transport: Transport
  appointment: String
  endInscription: DateTime
  startInscription: DateTime
  start: DateTime
  end: DateTime
  organizers: UserUpdateManyInput
  picture: String
}

input EventUpsertNestedInput {
  update: EventUpdateDataInput!
  create: EventCreateInput!
}

input EventUpsertWithoutPricesInput {
  update: EventUpdateWithoutPricesDataInput!
  create: EventCreateWithoutPricesInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  transport: Transport
  transport_not: Transport
  transport_in: [Transport!]
  transport_not_in: [Transport!]
  appointment: String
  appointment_not: String
  appointment_in: [String!]
  appointment_not_in: [String!]
  appointment_lt: String
  appointment_lte: String
  appointment_gt: String
  appointment_gte: String
  appointment_contains: String
  appointment_not_contains: String
  appointment_starts_with: String
  appointment_not_starts_with: String
  appointment_ends_with: String
  appointment_not_ends_with: String
  prices_every: PricesWhereInput
  prices_some: PricesWhereInput
  prices_none: PricesWhereInput
  endInscription: DateTime
  endInscription_not: DateTime
  endInscription_in: [DateTime!]
  endInscription_not_in: [DateTime!]
  endInscription_lt: DateTime
  endInscription_lte: DateTime
  endInscription_gt: DateTime
  endInscription_gte: DateTime
  startInscription: DateTime
  startInscription_not: DateTime
  startInscription_in: [DateTime!]
  startInscription_not_in: [DateTime!]
  startInscription_lt: DateTime
  startInscription_lte: DateTime
  startInscription_gt: DateTime
  startInscription_gte: DateTime
  start: DateTime
  start_not: DateTime
  start_in: [DateTime!]
  start_not_in: [DateTime!]
  start_lt: DateTime
  start_lte: DateTime
  start_gt: DateTime
  start_gte: DateTime
  end: DateTime
  end_not: DateTime
  end_in: [DateTime!]
  end_not_in: [DateTime!]
  end_lt: DateTime
  end_lte: DateTime
  end_gt: DateTime
  end_gte: DateTime
  organizers_every: UserWhereInput
  organizers_some: UserWhereInput
  organizers_none: UserWhereInput
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createNews(data: NewsCreateInput!): News!
  updateNews(data: NewsUpdateInput!, where: NewsWhereUniqueInput!): News
  updateManyNewses(data: NewsUpdateManyMutationInput!, where: NewsWhereInput): BatchPayload!
  upsertNews(where: NewsWhereUniqueInput!, create: NewsCreateInput!, update: NewsUpdateInput!): News!
  deleteNews(where: NewsWhereUniqueInput!): News
  deleteManyNewses(where: NewsWhereInput): BatchPayload!
  createPrices(data: PricesCreateInput!): Prices!
  updatePrices(data: PricesUpdateInput!, where: PricesWhereUniqueInput!): Prices
  updateManyPriceses(data: PricesUpdateManyMutationInput!, where: PricesWhereInput): BatchPayload!
  upsertPrices(where: PricesWhereUniqueInput!, create: PricesCreateInput!, update: PricesUpdateInput!): Prices!
  deletePrices(where: PricesWhereUniqueInput!): Prices
  deleteManyPriceses(where: PricesWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type News {
  id: ID!
  title: String!
  date: DateTime!
  content: String!
  event: Event!
}

type NewsConnection {
  pageInfo: PageInfo!
  edges: [NewsEdge]!
  aggregate: AggregateNews!
}

input NewsCreateInput {
  id: ID
  title: String!
  date: DateTime!
  content: String!
  event: EventCreateOneInput!
}

type NewsEdge {
  node: News!
  cursor: String!
}

enum NewsOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  date_ASC
  date_DESC
  content_ASC
  content_DESC
}

type NewsPreviousValues {
  id: ID!
  title: String!
  date: DateTime!
  content: String!
}

type NewsSubscriptionPayload {
  mutation: MutationType!
  node: News
  updatedFields: [String!]
  previousValues: NewsPreviousValues
}

input NewsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NewsWhereInput
  AND: [NewsSubscriptionWhereInput!]
  OR: [NewsSubscriptionWhereInput!]
  NOT: [NewsSubscriptionWhereInput!]
}

input NewsUpdateInput {
  title: String
  date: DateTime
  content: String
  event: EventUpdateOneRequiredInput
}

input NewsUpdateManyMutationInput {
  title: String
  date: DateTime
  content: String
}

input NewsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  event: EventWhereInput
  AND: [NewsWhereInput!]
  OR: [NewsWhereInput!]
  NOT: [NewsWhereInput!]
}

input NewsWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Prices {
  id: ID!
  event: Event!
  status: [Status!]!
  price: Float!
}

type PricesConnection {
  pageInfo: PageInfo!
  edges: [PricesEdge]!
  aggregate: AggregatePrices!
}

input PricesCreateInput {
  id: ID
  event: EventCreateOneWithoutPricesInput!
  status: PricesCreatestatusInput
  price: Float!
}

input PricesCreateManyWithoutEventInput {
  create: [PricesCreateWithoutEventInput!]
  connect: [PricesWhereUniqueInput!]
}

input PricesCreatestatusInput {
  set: [Status!]
}

input PricesCreateWithoutEventInput {
  id: ID
  status: PricesCreatestatusInput
  price: Float!
}

type PricesEdge {
  node: Prices!
  cursor: String!
}

enum PricesOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
}

type PricesPreviousValues {
  id: ID!
  status: [Status!]!
  price: Float!
}

input PricesScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  AND: [PricesScalarWhereInput!]
  OR: [PricesScalarWhereInput!]
  NOT: [PricesScalarWhereInput!]
}

type PricesSubscriptionPayload {
  mutation: MutationType!
  node: Prices
  updatedFields: [String!]
  previousValues: PricesPreviousValues
}

input PricesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PricesWhereInput
  AND: [PricesSubscriptionWhereInput!]
  OR: [PricesSubscriptionWhereInput!]
  NOT: [PricesSubscriptionWhereInput!]
}

input PricesUpdateInput {
  event: EventUpdateOneRequiredWithoutPricesInput
  status: PricesUpdatestatusInput
  price: Float
}

input PricesUpdateManyDataInput {
  status: PricesUpdatestatusInput
  price: Float
}

input PricesUpdateManyMutationInput {
  status: PricesUpdatestatusInput
  price: Float
}

input PricesUpdateManyWithoutEventInput {
  create: [PricesCreateWithoutEventInput!]
  delete: [PricesWhereUniqueInput!]
  connect: [PricesWhereUniqueInput!]
  set: [PricesWhereUniqueInput!]
  disconnect: [PricesWhereUniqueInput!]
  update: [PricesUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [PricesUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [PricesScalarWhereInput!]
  updateMany: [PricesUpdateManyWithWhereNestedInput!]
}

input PricesUpdateManyWithWhereNestedInput {
  where: PricesScalarWhereInput!
  data: PricesUpdateManyDataInput!
}

input PricesUpdatestatusInput {
  set: [Status!]
}

input PricesUpdateWithoutEventDataInput {
  status: PricesUpdatestatusInput
  price: Float
}

input PricesUpdateWithWhereUniqueWithoutEventInput {
  where: PricesWhereUniqueInput!
  data: PricesUpdateWithoutEventDataInput!
}

input PricesUpsertWithWhereUniqueWithoutEventInput {
  where: PricesWhereUniqueInput!
  update: PricesUpdateWithoutEventDataInput!
  create: PricesCreateWithoutEventInput!
}

input PricesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  event: EventWhereInput
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  AND: [PricesWhereInput!]
  OR: [PricesWhereInput!]
  NOT: [PricesWhereInput!]
}

input PricesWhereUniqueInput {
  id: ID
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  news(where: NewsWhereUniqueInput!): News
  newses(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [News]!
  newsesConnection(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NewsConnection!
  prices(where: PricesWhereUniqueInput!): Prices
  priceses(where: PricesWhereInput, orderBy: PricesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prices]!
  pricesesConnection(where: PricesWhereInput, orderBy: PricesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PricesConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Sexe {
  MALE
  FEMALE
  OTHER
}

enum Status {
  OJ
  Actif
  Moniteur
  Comite
  Participant
}

type Subscription {
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  news(where: NewsSubscriptionWhereInput): NewsSubscriptionPayload
  prices(where: PricesSubscriptionWhereInput): PricesSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

enum Transport {
  OWNCAR
  CAR
}

type User {
  id: ID!
  lastName: String!
  firstName: String!
  email: String!
  street: String!
  city: String!
  NPA: Int!
  birthday: DateTime!
  sexe: Sexe
  createDate: DateTime!
  updateDate: DateTime!
  status: [Status!]!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  lastName: String!
  firstName: String!
  email: String!
  street: String!
  city: String!
  NPA: Int!
  birthday: DateTime!
  sexe: Sexe
  createDate: DateTime!
  updateDate: DateTime!
  status: UserCreatestatusInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreatestatusInput {
  set: [Status!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  firstName_ASC
  firstName_DESC
  email_ASC
  email_DESC
  street_ASC
  street_DESC
  city_ASC
  city_DESC
  NPA_ASC
  NPA_DESC
  birthday_ASC
  birthday_DESC
  sexe_ASC
  sexe_DESC
  createDate_ASC
  createDate_DESC
  updateDate_ASC
  updateDate_DESC
}

type UserPreviousValues {
  id: ID!
  lastName: String!
  firstName: String!
  email: String!
  street: String!
  city: String!
  NPA: Int!
  birthday: DateTime!
  sexe: Sexe
  createDate: DateTime!
  updateDate: DateTime!
  status: [Status!]!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  NPA: Int
  NPA_not: Int
  NPA_in: [Int!]
  NPA_not_in: [Int!]
  NPA_lt: Int
  NPA_lte: Int
  NPA_gt: Int
  NPA_gte: Int
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  sexe: Sexe
  sexe_not: Sexe
  sexe_in: [Sexe!]
  sexe_not_in: [Sexe!]
  createDate: DateTime
  createDate_not: DateTime
  createDate_in: [DateTime!]
  createDate_not_in: [DateTime!]
  createDate_lt: DateTime
  createDate_lte: DateTime
  createDate_gt: DateTime
  createDate_gte: DateTime
  updateDate: DateTime
  updateDate_not: DateTime
  updateDate_in: [DateTime!]
  updateDate_not_in: [DateTime!]
  updateDate_lt: DateTime
  updateDate_lte: DateTime
  updateDate_gt: DateTime
  updateDate_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  lastName: String
  firstName: String
  email: String
  street: String
  city: String
  NPA: Int
  birthday: DateTime
  sexe: Sexe
  createDate: DateTime
  updateDate: DateTime
  status: UserUpdatestatusInput
}

input UserUpdateInput {
  lastName: String
  firstName: String
  email: String
  street: String
  city: String
  NPA: Int
  birthday: DateTime
  sexe: Sexe
  createDate: DateTime
  updateDate: DateTime
  status: UserUpdatestatusInput
}

input UserUpdateManyDataInput {
  lastName: String
  firstName: String
  email: String
  street: String
  city: String
  NPA: Int
  birthday: DateTime
  sexe: Sexe
  createDate: DateTime
  updateDate: DateTime
  status: UserUpdatestatusInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  lastName: String
  firstName: String
  email: String
  street: String
  city: String
  NPA: Int
  birthday: DateTime
  sexe: Sexe
  createDate: DateTime
  updateDate: DateTime
  status: UserUpdatestatusInput
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdatestatusInput {
  set: [Status!]
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  NPA: Int
  NPA_not: Int
  NPA_in: [Int!]
  NPA_not_in: [Int!]
  NPA_lt: Int
  NPA_lte: Int
  NPA_gt: Int
  NPA_gte: Int
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  sexe: Sexe
  sexe_not: Sexe
  sexe_in: [Sexe!]
  sexe_not_in: [Sexe!]
  createDate: DateTime
  createDate_not: DateTime
  createDate_in: [DateTime!]
  createDate_not_in: [DateTime!]
  createDate_lt: DateTime
  createDate_lte: DateTime
  createDate_gt: DateTime
  createDate_gte: DateTime
  updateDate: DateTime
  updateDate_not: DateTime
  updateDate_in: [DateTime!]
  updateDate_not_in: [DateTime!]
  updateDate_lt: DateTime
  updateDate_lte: DateTime
  updateDate_gt: DateTime
  updateDate_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`