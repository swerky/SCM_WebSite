/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Event: EventObject
      Prices: PricesObject
      EventConnection: EventConnectionObject
      EventEdge: EventEdgeObject
      AggregateEvent: AggregateEventObject
      PricesConnection: PricesConnectionObject
      PricesEdge: PricesEdgeObject
      AggregatePrices: AggregatePricesObject
      News: NewsObject
      NewsConnection: NewsConnectionObject
      NewsEdge: NewsEdgeObject
      AggregateNews: AggregateNewsObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      EventSubscriptionPayload: EventSubscriptionPayloadObject
      EventPreviousValues: EventPreviousValuesObject
      PricesSubscriptionPayload: PricesSubscriptionPayloadObject
      PricesPreviousValues: PricesPreviousValuesObject
      NewsSubscriptionPayload: NewsSubscriptionPayloadObject
      NewsPreviousValues: NewsPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Event: EventFieldDetails
      Prices: PricesFieldDetails
      EventConnection: EventConnectionFieldDetails
      EventEdge: EventEdgeFieldDetails
      AggregateEvent: AggregateEventFieldDetails
      PricesConnection: PricesConnectionFieldDetails
      PricesEdge: PricesEdgeFieldDetails
      AggregatePrices: AggregatePricesFieldDetails
      News: NewsFieldDetails
      NewsConnection: NewsConnectionFieldDetails
      NewsEdge: NewsEdgeFieldDetails
      AggregateNews: AggregateNewsFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      EventSubscriptionPayload: EventSubscriptionPayloadFieldDetails
      EventPreviousValues: EventPreviousValuesFieldDetails
      PricesSubscriptionPayload: PricesSubscriptionPayloadFieldDetails
      PricesPreviousValues: PricesPreviousValuesFieldDetails
      NewsSubscriptionPayload: NewsSubscriptionPayloadFieldDetails
      NewsPreviousValues: NewsPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      EventWhereUniqueInput: EventWhereUniqueInputInputObject
      PricesWhereInput: PricesWhereInputInputObject
      EventWhereInput: EventWhereInputInputObject
      PricesWhereUniqueInput: PricesWhereUniqueInputInputObject
      NewsWhereUniqueInput: NewsWhereUniqueInputInputObject
      NewsWhereInput: NewsWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserCreatestatusInput: UserCreatestatusInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdatestatusInput: UserUpdatestatusInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      EventCreateInput: EventCreateInputInputObject
      PricesCreateManyWithoutEventInput: PricesCreateManyWithoutEventInputInputObject
      PricesCreateWithoutEventInput: PricesCreateWithoutEventInputInputObject
      PricesCreatestatusInput: PricesCreatestatusInputInputObject
      UserCreateManyInput: UserCreateManyInputInputObject
      EventUpdateInput: EventUpdateInputInputObject
      PricesUpdateManyWithoutEventInput: PricesUpdateManyWithoutEventInputInputObject
      PricesUpdateWithWhereUniqueWithoutEventInput: PricesUpdateWithWhereUniqueWithoutEventInputInputObject
      PricesUpdateWithoutEventDataInput: PricesUpdateWithoutEventDataInputInputObject
      PricesUpdatestatusInput: PricesUpdatestatusInputInputObject
      PricesUpsertWithWhereUniqueWithoutEventInput: PricesUpsertWithWhereUniqueWithoutEventInputInputObject
      PricesScalarWhereInput: PricesScalarWhereInputInputObject
      PricesUpdateManyWithWhereNestedInput: PricesUpdateManyWithWhereNestedInputInputObject
      PricesUpdateManyDataInput: PricesUpdateManyDataInputInputObject
      UserUpdateManyInput: UserUpdateManyInputInputObject
      UserUpdateWithWhereUniqueNestedInput: UserUpdateWithWhereUniqueNestedInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertWithWhereUniqueNestedInput: UserUpsertWithWhereUniqueNestedInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      EventUpdateManyMutationInput: EventUpdateManyMutationInputInputObject
      PricesCreateInput: PricesCreateInputInputObject
      EventCreateOneWithoutPricesInput: EventCreateOneWithoutPricesInputInputObject
      EventCreateWithoutPricesInput: EventCreateWithoutPricesInputInputObject
      PricesUpdateInput: PricesUpdateInputInputObject
      EventUpdateOneRequiredWithoutPricesInput: EventUpdateOneRequiredWithoutPricesInputInputObject
      EventUpdateWithoutPricesDataInput: EventUpdateWithoutPricesDataInputInputObject
      EventUpsertWithoutPricesInput: EventUpsertWithoutPricesInputInputObject
      PricesUpdateManyMutationInput: PricesUpdateManyMutationInputInputObject
      NewsCreateInput: NewsCreateInputInputObject
      EventCreateOneInput: EventCreateOneInputInputObject
      NewsUpdateInput: NewsUpdateInputInputObject
      EventUpdateOneRequiredInput: EventUpdateOneRequiredInputInputObject
      EventUpdateDataInput: EventUpdateDataInputInputObject
      EventUpsertNestedInput: EventUpsertNestedInputInputObject
      NewsUpdateManyMutationInput: NewsUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      EventSubscriptionWhereInput: EventSubscriptionWhereInputInputObject
      PricesSubscriptionWhereInput: PricesSubscriptionWhereInputInputObject
      NewsSubscriptionWhereInput: NewsSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Sexe: SexeValues,
    Status: StatusValues,
    UserOrderByInput: UserOrderByInputValues,
    Transport: TransportValues,
    PricesOrderByInput: PricesOrderByInputValues,
    EventOrderByInput: EventOrderByInputValues,
    NewsOrderByInput: NewsOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'event', args?: QueryEventArgs[] | false, alias?: string  } 
  | { name: 'events', args?: QueryEventsArgs[] | false, alias?: string  } 
  | { name: 'eventsConnection', args?: QueryEventsConnectionArgs[] | false, alias?: string  } 
  | { name: 'prices', args?: QueryPricesArgs[] | false, alias?: string  } 
  | { name: 'priceses', args?: QueryPricesesArgs[] | false, alias?: string  } 
  | { name: 'pricesesConnection', args?: QueryPricesesConnectionArgs[] | false, alias?: string  } 
  | { name: 'news', args?: QueryNewsArgs[] | false, alias?: string  } 
  | { name: 'newses', args?: QueryNewsesArgs[] | false, alias?: string  } 
  | { name: 'newsesConnection', args?: QueryNewsesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'event'
  | 'events'
  | 'eventsConnection'
  | 'prices'
  | 'priceses'
  | 'pricesesConnection'
  | 'news'
  | 'newses'
  | 'newsesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEventArgs =
  | 'where'
type QueryEventsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEventsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPricesArgs =
  | 'where'
type QueryPricesesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPricesesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNewsArgs =
  | 'where'
type QueryNewsesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNewsesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  event: {
    type: 'Event'
    args: Record<QueryEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EventWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event | null> | prisma.Event | null
  }
  events: {
    type: 'Event'
    args: Record<QueryEventsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EventWhereInput | null, orderBy?: prisma.EventOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event[]> | prisma.Event[]
  }
  eventsConnection: {
    type: 'EventConnection'
    args: Record<QueryEventsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EventWhereInput | null, orderBy?: prisma.EventOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EventConnection> | prisma.EventConnection
  }
  prices: {
    type: 'Prices'
    args: Record<QueryPricesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PricesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prices | null> | prisma.Prices | null
  }
  priceses: {
    type: 'Prices'
    args: Record<QueryPricesesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PricesWhereInput | null, orderBy?: prisma.PricesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prices[]> | prisma.Prices[]
  }
  pricesesConnection: {
    type: 'PricesConnection'
    args: Record<QueryPricesesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PricesWhereInput | null, orderBy?: prisma.PricesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PricesConnection> | prisma.PricesConnection
  }
  news: {
    type: 'News'
    args: Record<QueryNewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: NewsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.News | null> | prisma.News | null
  }
  newses: {
    type: 'News'
    args: Record<QueryNewsesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NewsWhereInput | null, orderBy?: prisma.NewsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.News[]> | prisma.News[]
  }
  newsesConnection: {
    type: 'NewsConnection'
    args: Record<QueryNewsesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NewsWhereInput | null, orderBy?: prisma.NewsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NewsConnection> | prisma.NewsConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'street', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'NPA', args?: [] | false, alias?: string  } 
  | { name: 'birthday', args?: [] | false, alias?: string  } 
  | { name: 'sexe', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'lastName'
  | 'firstName'
  | 'email'
  | 'street'
  | 'city'
  | 'NPA'
  | 'birthday'
  | 'sexe'
  | 'status'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  street: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  NPA: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  birthday: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sexe: {
    type: 'Sexe'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sexe | null> | prisma.Sexe | null
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status[]> | prisma.Status[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Event

type EventObject =
  | EventFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'transport', args?: [] | false, alias?: string  } 
  | { name: 'appointment', args?: [] | false, alias?: string  } 
  | { name: 'prices', args?: EventPricesArgs[] | false, alias?: string  } 
  | { name: 'endInscription', args?: [] | false, alias?: string  } 
  | { name: 'startInscription', args?: [] | false, alias?: string  } 
  | { name: 'start', args?: [] | false, alias?: string  } 
  | { name: 'end', args?: [] | false, alias?: string  } 
  | { name: 'offert', args?: [] | false, alias?: string  } 
  | { name: 'informations', args?: [] | false, alias?: string  } 
  | { name: 'organizers', args?: EventOrganizersArgs[] | false, alias?: string  } 
  | { name: 'picture', args?: [] | false, alias?: string  } 

type EventFields =
  | 'id'
  | 'name'
  | 'location'
  | 'transport'
  | 'appointment'
  | 'prices'
  | 'endInscription'
  | 'startInscription'
  | 'start'
  | 'end'
  | 'offert'
  | 'informations'
  | 'organizers'
  | 'picture'


type EventPricesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type EventOrganizersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface EventFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  location: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  transport: {
    type: 'Transport'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Event">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transport | null> | prisma.Transport | null
  }
  appointment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  prices: {
    type: 'Prices'
    args: Record<EventPricesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Event">,
      args: { where?: PricesWhereInput | null, orderBy?: prisma.PricesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prices[]> | prisma.Prices[]
  }
  endInscription: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startInscription: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  start: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  end: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  offert: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  informations: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  organizers: {
    type: 'User'
    args: Record<EventOrganizersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Event">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  picture: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Prices

type PricesObject =
  | PricesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'event', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 

type PricesFields =
  | 'id'
  | 'event'
  | 'status'
  | 'price'



  

export interface PricesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  event: {
    type: 'Event'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Prices">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event> | prisma.Event
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Prices">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status[]> | prisma.Status[]
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EventConnection

type EventConnectionObject =
  | EventConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EventConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EventConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EventConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EventEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EventConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EventEdge[]> | prisma.EventEdge[]
  }
  aggregate: {
    type: 'AggregateEvent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EventConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEvent> | prisma.AggregateEvent
  }
}
  

// Types for EventEdge

type EventEdgeObject =
  | EventEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EventEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EventEdgeFieldDetails {
  node: {
    type: 'Event'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EventEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event> | prisma.Event
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEvent

type AggregateEventObject =
  | AggregateEventFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEventFields =
  | 'count'



  

export interface AggregateEventFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PricesConnection

type PricesConnectionObject =
  | PricesConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PricesConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PricesConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PricesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PricesEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PricesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PricesEdge[]> | prisma.PricesEdge[]
  }
  aggregate: {
    type: 'AggregatePrices'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PricesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePrices> | prisma.AggregatePrices
  }
}
  

// Types for PricesEdge

type PricesEdgeObject =
  | PricesEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PricesEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PricesEdgeFieldDetails {
  node: {
    type: 'Prices'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PricesEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prices> | prisma.Prices
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePrices

type AggregatePricesObject =
  | AggregatePricesFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePricesFields =
  | 'count'



  

export interface AggregatePricesFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for News

type NewsObject =
  | NewsFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'event', args?: [] | false, alias?: string  } 

type NewsFields =
  | 'id'
  | 'title'
  | 'date'
  | 'content'
  | 'event'



  

export interface NewsFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  event: {
    type: 'Event'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"News">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event> | prisma.Event
  }
}
  

// Types for NewsConnection

type NewsConnectionObject =
  | NewsConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type NewsConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface NewsConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NewsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'NewsEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"NewsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NewsEdge[]> | prisma.NewsEdge[]
  }
  aggregate: {
    type: 'AggregateNews'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NewsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateNews> | prisma.AggregateNews
  }
}
  

// Types for NewsEdge

type NewsEdgeObject =
  | NewsEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type NewsEdgeFields =
  | 'node'
  | 'cursor'



  

export interface NewsEdgeFieldDetails {
  node: {
    type: 'News'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NewsEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.News> | prisma.News
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateNews

type AggregateNewsObject =
  | AggregateNewsFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateNewsFields =
  | 'count'



  

export interface AggregateNewsFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createEvent', args?: MutationCreateEventArgs[] | false, alias?: string  } 
  | { name: 'updateEvent', args?: MutationUpdateEventArgs[] | false, alias?: string  } 
  | { name: 'updateManyEvents', args?: MutationUpdateManyEventsArgs[] | false, alias?: string  } 
  | { name: 'upsertEvent', args?: MutationUpsertEventArgs[] | false, alias?: string  } 
  | { name: 'deleteEvent', args?: MutationDeleteEventArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEvents', args?: MutationDeleteManyEventsArgs[] | false, alias?: string  } 
  | { name: 'createPrices', args?: MutationCreatePricesArgs[] | false, alias?: string  } 
  | { name: 'updatePrices', args?: MutationUpdatePricesArgs[] | false, alias?: string  } 
  | { name: 'updateManyPriceses', args?: MutationUpdateManyPricesesArgs[] | false, alias?: string  } 
  | { name: 'upsertPrices', args?: MutationUpsertPricesArgs[] | false, alias?: string  } 
  | { name: 'deletePrices', args?: MutationDeletePricesArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPriceses', args?: MutationDeleteManyPricesesArgs[] | false, alias?: string  } 
  | { name: 'createNews', args?: MutationCreateNewsArgs[] | false, alias?: string  } 
  | { name: 'updateNews', args?: MutationUpdateNewsArgs[] | false, alias?: string  } 
  | { name: 'updateManyNewses', args?: MutationUpdateManyNewsesArgs[] | false, alias?: string  } 
  | { name: 'upsertNews', args?: MutationUpsertNewsArgs[] | false, alias?: string  } 
  | { name: 'deleteNews', args?: MutationDeleteNewsArgs[] | false, alias?: string  } 
  | { name: 'deleteManyNewses', args?: MutationDeleteManyNewsesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createEvent'
  | 'updateEvent'
  | 'updateManyEvents'
  | 'upsertEvent'
  | 'deleteEvent'
  | 'deleteManyEvents'
  | 'createPrices'
  | 'updatePrices'
  | 'updateManyPriceses'
  | 'upsertPrices'
  | 'deletePrices'
  | 'deleteManyPriceses'
  | 'createNews'
  | 'updateNews'
  | 'updateManyNewses'
  | 'upsertNews'
  | 'deleteNews'
  | 'deleteManyNewses'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateEventArgs =
  | 'data'
type MutationUpdateEventArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEventsArgs =
  | 'data'
  | 'where'
type MutationUpsertEventArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEventArgs =
  | 'where'
type MutationDeleteManyEventsArgs =
  | 'where'
type MutationCreatePricesArgs =
  | 'data'
type MutationUpdatePricesArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPricesesArgs =
  | 'data'
  | 'where'
type MutationUpsertPricesArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePricesArgs =
  | 'where'
type MutationDeleteManyPricesesArgs =
  | 'where'
type MutationCreateNewsArgs =
  | 'data'
type MutationUpdateNewsArgs =
  | 'data'
  | 'where'
type MutationUpdateManyNewsesArgs =
  | 'data'
  | 'where'
type MutationUpsertNewsArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteNewsArgs =
  | 'where'
type MutationDeleteManyNewsesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEvent: {
    type: 'Event'
    args: Record<MutationCreateEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EventCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event> | prisma.Event
  }
  updateEvent: {
    type: 'Event'
    args: Record<MutationUpdateEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EventUpdateInput, where: EventWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event | null> | prisma.Event | null
  }
  updateManyEvents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEventsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EventUpdateManyMutationInput, where?: EventWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEvent: {
    type: 'Event'
    args: Record<MutationUpsertEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EventWhereUniqueInput, create: EventCreateInput, update: EventUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event> | prisma.Event
  }
  deleteEvent: {
    type: 'Event'
    args: Record<MutationDeleteEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EventWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event | null> | prisma.Event | null
  }
  deleteManyEvents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEventsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EventWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPrices: {
    type: 'Prices'
    args: Record<MutationCreatePricesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PricesCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prices> | prisma.Prices
  }
  updatePrices: {
    type: 'Prices'
    args: Record<MutationUpdatePricesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PricesUpdateInput, where: PricesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prices | null> | prisma.Prices | null
  }
  updateManyPriceses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPricesesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PricesUpdateManyMutationInput, where?: PricesWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPrices: {
    type: 'Prices'
    args: Record<MutationUpsertPricesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PricesWhereUniqueInput, create: PricesCreateInput, update: PricesUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prices> | prisma.Prices
  }
  deletePrices: {
    type: 'Prices'
    args: Record<MutationDeletePricesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PricesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prices | null> | prisma.Prices | null
  }
  deleteManyPriceses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPricesesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PricesWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createNews: {
    type: 'News'
    args: Record<MutationCreateNewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NewsCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.News> | prisma.News
  }
  updateNews: {
    type: 'News'
    args: Record<MutationUpdateNewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NewsUpdateInput, where: NewsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.News | null> | prisma.News | null
  }
  updateManyNewses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyNewsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NewsUpdateManyMutationInput, where?: NewsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertNews: {
    type: 'News'
    args: Record<MutationUpsertNewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NewsWhereUniqueInput, create: NewsCreateInput, update: NewsUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.News> | prisma.News
  }
  deleteNews: {
    type: 'News'
    args: Record<MutationDeleteNewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NewsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.News | null> | prisma.News | null
  }
  deleteManyNewses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyNewsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: NewsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'event', args?: SubscriptionEventArgs[] | false, alias?: string  } 
  | { name: 'prices', args?: SubscriptionPricesArgs[] | false, alias?: string  } 
  | { name: 'news', args?: SubscriptionNewsArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'event'
  | 'prices'
  | 'news'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionEventArgs =
  | 'where'
type SubscriptionPricesArgs =
  | 'where'
type SubscriptionNewsArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  event: {
    type: 'EventSubscriptionPayload'
    args: Record<SubscriptionEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EventSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EventSubscriptionPayload | null> | prisma.EventSubscriptionPayload | null
  }
  prices: {
    type: 'PricesSubscriptionPayload'
    args: Record<SubscriptionPricesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PricesSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PricesSubscriptionPayload | null> | prisma.PricesSubscriptionPayload | null
  }
  news: {
    type: 'NewsSubscriptionPayload'
    args: Record<SubscriptionNewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: NewsSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NewsSubscriptionPayload | null> | prisma.NewsSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'street', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'NPA', args?: [] | false, alias?: string  } 
  | { name: 'birthday', args?: [] | false, alias?: string  } 
  | { name: 'sexe', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'lastName'
  | 'firstName'
  | 'email'
  | 'street'
  | 'city'
  | 'NPA'
  | 'birthday'
  | 'sexe'
  | 'status'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  street: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  NPA: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  birthday: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sexe: {
    type: 'Sexe'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sexe | null> | prisma.Sexe | null
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status[]> | prisma.Status[]
  }
}
  

// Types for EventSubscriptionPayload

type EventSubscriptionPayloadObject =
  | EventSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EventSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EventSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EventSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Event'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EventSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event | null> | prisma.Event | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EventPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EventSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EventPreviousValues | null> | prisma.EventPreviousValues | null
  }
}
  

// Types for EventPreviousValues

type EventPreviousValuesObject =
  | EventPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'transport', args?: [] | false, alias?: string  } 
  | { name: 'appointment', args?: [] | false, alias?: string  } 
  | { name: 'endInscription', args?: [] | false, alias?: string  } 
  | { name: 'startInscription', args?: [] | false, alias?: string  } 
  | { name: 'start', args?: [] | false, alias?: string  } 
  | { name: 'end', args?: [] | false, alias?: string  } 
  | { name: 'offert', args?: [] | false, alias?: string  } 
  | { name: 'informations', args?: [] | false, alias?: string  } 
  | { name: 'picture', args?: [] | false, alias?: string  } 

type EventPreviousValuesFields =
  | 'id'
  | 'name'
  | 'location'
  | 'transport'
  | 'appointment'
  | 'endInscription'
  | 'startInscription'
  | 'start'
  | 'end'
  | 'offert'
  | 'informations'
  | 'picture'



  

export interface EventPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  location: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  transport: {
    type: 'Transport'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EventPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Transport | null> | prisma.Transport | null
  }
  appointment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endInscription: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startInscription: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  start: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  end: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  offert: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  informations: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  picture: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PricesSubscriptionPayload

type PricesSubscriptionPayloadObject =
  | PricesSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PricesSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PricesSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PricesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Prices'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PricesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prices | null> | prisma.Prices | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PricesPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PricesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PricesPreviousValues | null> | prisma.PricesPreviousValues | null
  }
}
  

// Types for PricesPreviousValues

type PricesPreviousValuesObject =
  | PricesPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 

type PricesPreviousValuesFields =
  | 'id'
  | 'status'
  | 'price'



  

export interface PricesPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PricesPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status[]> | prisma.Status[]
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NewsSubscriptionPayload

type NewsSubscriptionPayloadObject =
  | NewsSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type NewsSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface NewsSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NewsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'News'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NewsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.News | null> | prisma.News | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'NewsPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NewsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NewsPreviousValues | null> | prisma.NewsPreviousValues | null
  }
}
  

// Types for NewsPreviousValues

type NewsPreviousValuesObject =
  | NewsPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type NewsPreviousValuesFields =
  | 'id'
  | 'title'
  | 'date'
  | 'content'



  

export interface NewsPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  street?: string | null
  street_not?: string | null
  street_in?: string[]
  street_not_in?: string[]
  street_lt?: string | null
  street_lte?: string | null
  street_gt?: string | null
  street_gte?: string | null
  street_contains?: string | null
  street_not_contains?: string | null
  street_starts_with?: string | null
  street_not_starts_with?: string | null
  street_ends_with?: string | null
  street_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  NPA?: number | null
  NPA_not?: number | null
  NPA_in?: number[]
  NPA_not_in?: number[]
  NPA_lt?: number | null
  NPA_lte?: number | null
  NPA_gt?: number | null
  NPA_gte?: number | null
  birthday?: string | null
  birthday_not?: string | null
  birthday_in?: string[]
  birthday_not_in?: string[]
  birthday_lt?: string | null
  birthday_lte?: string | null
  birthday_gt?: string | null
  birthday_gte?: string | null
  sexe?: prisma.Sexe | null
  sexe_not?: prisma.Sexe | null
  sexe_in?: prisma.Sexe[]
  sexe_not_in?: prisma.Sexe[]
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'street_not', alias?: string  } 
  | { name: 'street_in', alias?: string  } 
  | { name: 'street_not_in', alias?: string  } 
  | { name: 'street_lt', alias?: string  } 
  | { name: 'street_lte', alias?: string  } 
  | { name: 'street_gt', alias?: string  } 
  | { name: 'street_gte', alias?: string  } 
  | { name: 'street_contains', alias?: string  } 
  | { name: 'street_not_contains', alias?: string  } 
  | { name: 'street_starts_with', alias?: string  } 
  | { name: 'street_not_starts_with', alias?: string  } 
  | { name: 'street_ends_with', alias?: string  } 
  | { name: 'street_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'NPA', alias?: string  } 
  | { name: 'NPA_not', alias?: string  } 
  | { name: 'NPA_in', alias?: string  } 
  | { name: 'NPA_not_in', alias?: string  } 
  | { name: 'NPA_lt', alias?: string  } 
  | { name: 'NPA_lte', alias?: string  } 
  | { name: 'NPA_gt', alias?: string  } 
  | { name: 'NPA_gte', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'birthday_not', alias?: string  } 
  | { name: 'birthday_in', alias?: string  } 
  | { name: 'birthday_not_in', alias?: string  } 
  | { name: 'birthday_lt', alias?: string  } 
  | { name: 'birthday_lte', alias?: string  } 
  | { name: 'birthday_gt', alias?: string  } 
  | { name: 'birthday_gte', alias?: string  } 
  | { name: 'sexe', alias?: string  } 
  | { name: 'sexe_not', alias?: string  } 
  | { name: 'sexe_in', alias?: string  } 
  | { name: 'sexe_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EventWhereUniqueInput {
  id?: string | null
}
export type EventWhereUniqueInputInputObject =
  | Extract<keyof EventWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PricesWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  event?: EventWhereInput | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  AND?: PricesWhereInput[]
  OR?: PricesWhereInput[]
  NOT?: PricesWhereInput[]
}
export type PricesWhereInputInputObject =
  | Extract<keyof PricesWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'event', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EventWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  location?: string | null
  location_not?: string | null
  location_in?: string[]
  location_not_in?: string[]
  location_lt?: string | null
  location_lte?: string | null
  location_gt?: string | null
  location_gte?: string | null
  location_contains?: string | null
  location_not_contains?: string | null
  location_starts_with?: string | null
  location_not_starts_with?: string | null
  location_ends_with?: string | null
  location_not_ends_with?: string | null
  transport?: prisma.Transport | null
  transport_not?: prisma.Transport | null
  transport_in?: prisma.Transport[]
  transport_not_in?: prisma.Transport[]
  appointment?: string | null
  appointment_not?: string | null
  appointment_in?: string[]
  appointment_not_in?: string[]
  appointment_lt?: string | null
  appointment_lte?: string | null
  appointment_gt?: string | null
  appointment_gte?: string | null
  appointment_contains?: string | null
  appointment_not_contains?: string | null
  appointment_starts_with?: string | null
  appointment_not_starts_with?: string | null
  appointment_ends_with?: string | null
  appointment_not_ends_with?: string | null
  prices_every?: PricesWhereInput | null
  prices_some?: PricesWhereInput | null
  prices_none?: PricesWhereInput | null
  endInscription?: string | null
  endInscription_not?: string | null
  endInscription_in?: string[]
  endInscription_not_in?: string[]
  endInscription_lt?: string | null
  endInscription_lte?: string | null
  endInscription_gt?: string | null
  endInscription_gte?: string | null
  startInscription?: string | null
  startInscription_not?: string | null
  startInscription_in?: string[]
  startInscription_not_in?: string[]
  startInscription_lt?: string | null
  startInscription_lte?: string | null
  startInscription_gt?: string | null
  startInscription_gte?: string | null
  start?: string | null
  start_not?: string | null
  start_in?: string[]
  start_not_in?: string[]
  start_lt?: string | null
  start_lte?: string | null
  start_gt?: string | null
  start_gte?: string | null
  end?: string | null
  end_not?: string | null
  end_in?: string[]
  end_not_in?: string[]
  end_lt?: string | null
  end_lte?: string | null
  end_gt?: string | null
  end_gte?: string | null
  offert?: string | null
  offert_not?: string | null
  offert_in?: string[]
  offert_not_in?: string[]
  offert_lt?: string | null
  offert_lte?: string | null
  offert_gt?: string | null
  offert_gte?: string | null
  offert_contains?: string | null
  offert_not_contains?: string | null
  offert_starts_with?: string | null
  offert_not_starts_with?: string | null
  offert_ends_with?: string | null
  offert_not_ends_with?: string | null
  informations?: string | null
  informations_not?: string | null
  informations_in?: string[]
  informations_not_in?: string[]
  informations_lt?: string | null
  informations_lte?: string | null
  informations_gt?: string | null
  informations_gte?: string | null
  informations_contains?: string | null
  informations_not_contains?: string | null
  informations_starts_with?: string | null
  informations_not_starts_with?: string | null
  informations_ends_with?: string | null
  informations_not_ends_with?: string | null
  organizers_every?: UserWhereInput | null
  organizers_some?: UserWhereInput | null
  organizers_none?: UserWhereInput | null
  picture?: string | null
  picture_not?: string | null
  picture_in?: string[]
  picture_not_in?: string[]
  picture_lt?: string | null
  picture_lte?: string | null
  picture_gt?: string | null
  picture_gte?: string | null
  picture_contains?: string | null
  picture_not_contains?: string | null
  picture_starts_with?: string | null
  picture_not_starts_with?: string | null
  picture_ends_with?: string | null
  picture_not_ends_with?: string | null
  AND?: EventWhereInput[]
  OR?: EventWhereInput[]
  NOT?: EventWhereInput[]
}
export type EventWhereInputInputObject =
  | Extract<keyof EventWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'location_not', alias?: string  } 
  | { name: 'location_in', alias?: string  } 
  | { name: 'location_not_in', alias?: string  } 
  | { name: 'location_lt', alias?: string  } 
  | { name: 'location_lte', alias?: string  } 
  | { name: 'location_gt', alias?: string  } 
  | { name: 'location_gte', alias?: string  } 
  | { name: 'location_contains', alias?: string  } 
  | { name: 'location_not_contains', alias?: string  } 
  | { name: 'location_starts_with', alias?: string  } 
  | { name: 'location_not_starts_with', alias?: string  } 
  | { name: 'location_ends_with', alias?: string  } 
  | { name: 'location_not_ends_with', alias?: string  } 
  | { name: 'transport', alias?: string  } 
  | { name: 'transport_not', alias?: string  } 
  | { name: 'transport_in', alias?: string  } 
  | { name: 'transport_not_in', alias?: string  } 
  | { name: 'appointment', alias?: string  } 
  | { name: 'appointment_not', alias?: string  } 
  | { name: 'appointment_in', alias?: string  } 
  | { name: 'appointment_not_in', alias?: string  } 
  | { name: 'appointment_lt', alias?: string  } 
  | { name: 'appointment_lte', alias?: string  } 
  | { name: 'appointment_gt', alias?: string  } 
  | { name: 'appointment_gte', alias?: string  } 
  | { name: 'appointment_contains', alias?: string  } 
  | { name: 'appointment_not_contains', alias?: string  } 
  | { name: 'appointment_starts_with', alias?: string  } 
  | { name: 'appointment_not_starts_with', alias?: string  } 
  | { name: 'appointment_ends_with', alias?: string  } 
  | { name: 'appointment_not_ends_with', alias?: string  } 
  | { name: 'prices_every', alias?: string  } 
  | { name: 'prices_some', alias?: string  } 
  | { name: 'prices_none', alias?: string  } 
  | { name: 'endInscription', alias?: string  } 
  | { name: 'endInscription_not', alias?: string  } 
  | { name: 'endInscription_in', alias?: string  } 
  | { name: 'endInscription_not_in', alias?: string  } 
  | { name: 'endInscription_lt', alias?: string  } 
  | { name: 'endInscription_lte', alias?: string  } 
  | { name: 'endInscription_gt', alias?: string  } 
  | { name: 'endInscription_gte', alias?: string  } 
  | { name: 'startInscription', alias?: string  } 
  | { name: 'startInscription_not', alias?: string  } 
  | { name: 'startInscription_in', alias?: string  } 
  | { name: 'startInscription_not_in', alias?: string  } 
  | { name: 'startInscription_lt', alias?: string  } 
  | { name: 'startInscription_lte', alias?: string  } 
  | { name: 'startInscription_gt', alias?: string  } 
  | { name: 'startInscription_gte', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'start_not', alias?: string  } 
  | { name: 'start_in', alias?: string  } 
  | { name: 'start_not_in', alias?: string  } 
  | { name: 'start_lt', alias?: string  } 
  | { name: 'start_lte', alias?: string  } 
  | { name: 'start_gt', alias?: string  } 
  | { name: 'start_gte', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'end_not', alias?: string  } 
  | { name: 'end_in', alias?: string  } 
  | { name: 'end_not_in', alias?: string  } 
  | { name: 'end_lt', alias?: string  } 
  | { name: 'end_lte', alias?: string  } 
  | { name: 'end_gt', alias?: string  } 
  | { name: 'end_gte', alias?: string  } 
  | { name: 'offert', alias?: string  } 
  | { name: 'offert_not', alias?: string  } 
  | { name: 'offert_in', alias?: string  } 
  | { name: 'offert_not_in', alias?: string  } 
  | { name: 'offert_lt', alias?: string  } 
  | { name: 'offert_lte', alias?: string  } 
  | { name: 'offert_gt', alias?: string  } 
  | { name: 'offert_gte', alias?: string  } 
  | { name: 'offert_contains', alias?: string  } 
  | { name: 'offert_not_contains', alias?: string  } 
  | { name: 'offert_starts_with', alias?: string  } 
  | { name: 'offert_not_starts_with', alias?: string  } 
  | { name: 'offert_ends_with', alias?: string  } 
  | { name: 'offert_not_ends_with', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'informations_not', alias?: string  } 
  | { name: 'informations_in', alias?: string  } 
  | { name: 'informations_not_in', alias?: string  } 
  | { name: 'informations_lt', alias?: string  } 
  | { name: 'informations_lte', alias?: string  } 
  | { name: 'informations_gt', alias?: string  } 
  | { name: 'informations_gte', alias?: string  } 
  | { name: 'informations_contains', alias?: string  } 
  | { name: 'informations_not_contains', alias?: string  } 
  | { name: 'informations_starts_with', alias?: string  } 
  | { name: 'informations_not_starts_with', alias?: string  } 
  | { name: 'informations_ends_with', alias?: string  } 
  | { name: 'informations_not_ends_with', alias?: string  } 
  | { name: 'organizers_every', alias?: string  } 
  | { name: 'organizers_some', alias?: string  } 
  | { name: 'organizers_none', alias?: string  } 
  | { name: 'picture', alias?: string  } 
  | { name: 'picture_not', alias?: string  } 
  | { name: 'picture_in', alias?: string  } 
  | { name: 'picture_not_in', alias?: string  } 
  | { name: 'picture_lt', alias?: string  } 
  | { name: 'picture_lte', alias?: string  } 
  | { name: 'picture_gt', alias?: string  } 
  | { name: 'picture_gte', alias?: string  } 
  | { name: 'picture_contains', alias?: string  } 
  | { name: 'picture_not_contains', alias?: string  } 
  | { name: 'picture_starts_with', alias?: string  } 
  | { name: 'picture_not_starts_with', alias?: string  } 
  | { name: 'picture_ends_with', alias?: string  } 
  | { name: 'picture_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PricesWhereUniqueInput {
  id?: string | null
}
export type PricesWhereUniqueInputInputObject =
  | Extract<keyof PricesWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface NewsWhereUniqueInput {
  id?: string | null
}
export type NewsWhereUniqueInputInputObject =
  | Extract<keyof NewsWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface NewsWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  event?: EventWhereInput | null
  AND?: NewsWhereInput[]
  OR?: NewsWhereInput[]
  NOT?: NewsWhereInput[]
}
export type NewsWhereInputInputObject =
  | Extract<keyof NewsWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'event', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  lastName?: string
  firstName?: string
  email?: string
  street?: string
  city?: string
  NPA?: number
  birthday?: string
  sexe?: prisma.Sexe | null
  status?: UserCreatestatusInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'NPA', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'sexe', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface UserCreatestatusInput {
  set?: prisma.Status[]
}
export type UserCreatestatusInputInputObject =
  | Extract<keyof UserCreatestatusInput, string>
  | { name: 'set', alias?: string  } 
  
export interface UserUpdateInput {
  lastName?: string | null
  firstName?: string | null
  email?: string | null
  street?: string | null
  city?: string | null
  NPA?: number | null
  birthday?: string | null
  sexe?: prisma.Sexe | null
  status?: UserUpdatestatusInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'lastName', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'NPA', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'sexe', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface UserUpdatestatusInput {
  set?: prisma.Status[]
}
export type UserUpdatestatusInputInputObject =
  | Extract<keyof UserUpdatestatusInput, string>
  | { name: 'set', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  lastName?: string | null
  firstName?: string | null
  email?: string | null
  street?: string | null
  city?: string | null
  NPA?: number | null
  birthday?: string | null
  sexe?: prisma.Sexe | null
  status?: UserUpdatestatusInput | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'lastName', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'NPA', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'sexe', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EventCreateInput {
  id?: string | null
  name?: string
  location?: string
  transport?: prisma.Transport | null
  appointment?: string
  prices?: PricesCreateManyWithoutEventInput | null
  endInscription?: string
  startInscription?: string
  start?: string
  end?: string
  offert?: string | null
  informations?: string | null
  organizers?: UserCreateManyInput | null
  picture?: string | null
}
export type EventCreateInputInputObject =
  | Extract<keyof EventCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'transport', alias?: string  } 
  | { name: 'appointment', alias?: string  } 
  | { name: 'prices', alias?: string  } 
  | { name: 'endInscription', alias?: string  } 
  | { name: 'startInscription', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'offert', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'organizers', alias?: string  } 
  | { name: 'picture', alias?: string  } 
  
export interface PricesCreateManyWithoutEventInput {
  create?: PricesCreateWithoutEventInput[]
  connect?: PricesWhereUniqueInput[]
}
export type PricesCreateManyWithoutEventInputInputObject =
  | Extract<keyof PricesCreateManyWithoutEventInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PricesCreateWithoutEventInput {
  id?: string | null
  status?: PricesCreatestatusInput | null
  price?: number
}
export type PricesCreateWithoutEventInputInputObject =
  | Extract<keyof PricesCreateWithoutEventInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface PricesCreatestatusInput {
  set?: prisma.Status[]
}
export type PricesCreatestatusInputInputObject =
  | Extract<keyof PricesCreatestatusInput, string>
  | { name: 'set', alias?: string  } 
  
export interface UserCreateManyInput {
  create?: UserCreateInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyInputInputObject =
  | Extract<keyof UserCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EventUpdateInput {
  name?: string | null
  location?: string | null
  transport?: prisma.Transport | null
  appointment?: string | null
  prices?: PricesUpdateManyWithoutEventInput | null
  endInscription?: string | null
  startInscription?: string | null
  start?: string | null
  end?: string | null
  offert?: string | null
  informations?: string | null
  organizers?: UserUpdateManyInput | null
  picture?: string | null
}
export type EventUpdateInputInputObject =
  | Extract<keyof EventUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'transport', alias?: string  } 
  | { name: 'appointment', alias?: string  } 
  | { name: 'prices', alias?: string  } 
  | { name: 'endInscription', alias?: string  } 
  | { name: 'startInscription', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'offert', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'organizers', alias?: string  } 
  | { name: 'picture', alias?: string  } 
  
export interface PricesUpdateManyWithoutEventInput {
  create?: PricesCreateWithoutEventInput[]
  delete?: PricesWhereUniqueInput[]
  connect?: PricesWhereUniqueInput[]
  set?: PricesWhereUniqueInput[]
  disconnect?: PricesWhereUniqueInput[]
  update?: PricesUpdateWithWhereUniqueWithoutEventInput[]
  upsert?: PricesUpsertWithWhereUniqueWithoutEventInput[]
  deleteMany?: PricesScalarWhereInput[]
  updateMany?: PricesUpdateManyWithWhereNestedInput[]
}
export type PricesUpdateManyWithoutEventInputInputObject =
  | Extract<keyof PricesUpdateManyWithoutEventInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PricesUpdateWithWhereUniqueWithoutEventInput {
  where?: PricesWhereUniqueInput
  data?: PricesUpdateWithoutEventDataInput
}
export type PricesUpdateWithWhereUniqueWithoutEventInputInputObject =
  | Extract<keyof PricesUpdateWithWhereUniqueWithoutEventInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PricesUpdateWithoutEventDataInput {
  status?: PricesUpdatestatusInput | null
  price?: number | null
}
export type PricesUpdateWithoutEventDataInputInputObject =
  | Extract<keyof PricesUpdateWithoutEventDataInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface PricesUpdatestatusInput {
  set?: prisma.Status[]
}
export type PricesUpdatestatusInputInputObject =
  | Extract<keyof PricesUpdatestatusInput, string>
  | { name: 'set', alias?: string  } 
  
export interface PricesUpsertWithWhereUniqueWithoutEventInput {
  where?: PricesWhereUniqueInput
  update?: PricesUpdateWithoutEventDataInput
  create?: PricesCreateWithoutEventInput
}
export type PricesUpsertWithWhereUniqueWithoutEventInputInputObject =
  | Extract<keyof PricesUpsertWithWhereUniqueWithoutEventInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PricesScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  AND?: PricesScalarWhereInput[]
  OR?: PricesScalarWhereInput[]
  NOT?: PricesScalarWhereInput[]
}
export type PricesScalarWhereInputInputObject =
  | Extract<keyof PricesScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PricesUpdateManyWithWhereNestedInput {
  where?: PricesScalarWhereInput
  data?: PricesUpdateManyDataInput
}
export type PricesUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PricesUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PricesUpdateManyDataInput {
  status?: PricesUpdatestatusInput | null
  price?: number | null
}
export type PricesUpdateManyDataInputInputObject =
  | Extract<keyof PricesUpdateManyDataInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface UserUpdateManyInput {
  create?: UserCreateInput[]
  update?: UserUpdateWithWhereUniqueNestedInput[]
  upsert?: UserUpsertWithWhereUniqueNestedInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyInputInputObject =
  | Extract<keyof UserUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueNestedInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateDataInput
}
export type UserUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateDataInput {
  lastName?: string | null
  firstName?: string | null
  email?: string | null
  street?: string | null
  city?: string | null
  NPA?: number | null
  birthday?: string | null
  sexe?: prisma.Sexe | null
  status?: UserUpdatestatusInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'lastName', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'NPA', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'sexe', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueNestedInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  street?: string | null
  street_not?: string | null
  street_in?: string[]
  street_not_in?: string[]
  street_lt?: string | null
  street_lte?: string | null
  street_gt?: string | null
  street_gte?: string | null
  street_contains?: string | null
  street_not_contains?: string | null
  street_starts_with?: string | null
  street_not_starts_with?: string | null
  street_ends_with?: string | null
  street_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  NPA?: number | null
  NPA_not?: number | null
  NPA_in?: number[]
  NPA_not_in?: number[]
  NPA_lt?: number | null
  NPA_lte?: number | null
  NPA_gt?: number | null
  NPA_gte?: number | null
  birthday?: string | null
  birthday_not?: string | null
  birthday_in?: string[]
  birthday_not_in?: string[]
  birthday_lt?: string | null
  birthday_lte?: string | null
  birthday_gt?: string | null
  birthday_gte?: string | null
  sexe?: prisma.Sexe | null
  sexe_not?: prisma.Sexe | null
  sexe_in?: prisma.Sexe[]
  sexe_not_in?: prisma.Sexe[]
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'street_not', alias?: string  } 
  | { name: 'street_in', alias?: string  } 
  | { name: 'street_not_in', alias?: string  } 
  | { name: 'street_lt', alias?: string  } 
  | { name: 'street_lte', alias?: string  } 
  | { name: 'street_gt', alias?: string  } 
  | { name: 'street_gte', alias?: string  } 
  | { name: 'street_contains', alias?: string  } 
  | { name: 'street_not_contains', alias?: string  } 
  | { name: 'street_starts_with', alias?: string  } 
  | { name: 'street_not_starts_with', alias?: string  } 
  | { name: 'street_ends_with', alias?: string  } 
  | { name: 'street_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'NPA', alias?: string  } 
  | { name: 'NPA_not', alias?: string  } 
  | { name: 'NPA_in', alias?: string  } 
  | { name: 'NPA_not_in', alias?: string  } 
  | { name: 'NPA_lt', alias?: string  } 
  | { name: 'NPA_lte', alias?: string  } 
  | { name: 'NPA_gt', alias?: string  } 
  | { name: 'NPA_gte', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'birthday_not', alias?: string  } 
  | { name: 'birthday_in', alias?: string  } 
  | { name: 'birthday_not_in', alias?: string  } 
  | { name: 'birthday_lt', alias?: string  } 
  | { name: 'birthday_lte', alias?: string  } 
  | { name: 'birthday_gt', alias?: string  } 
  | { name: 'birthday_gte', alias?: string  } 
  | { name: 'sexe', alias?: string  } 
  | { name: 'sexe_not', alias?: string  } 
  | { name: 'sexe_in', alias?: string  } 
  | { name: 'sexe_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  lastName?: string | null
  firstName?: string | null
  email?: string | null
  street?: string | null
  city?: string | null
  NPA?: number | null
  birthday?: string | null
  sexe?: prisma.Sexe | null
  status?: UserUpdatestatusInput | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'lastName', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'NPA', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'sexe', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface EventUpdateManyMutationInput {
  name?: string | null
  location?: string | null
  transport?: prisma.Transport | null
  appointment?: string | null
  endInscription?: string | null
  startInscription?: string | null
  start?: string | null
  end?: string | null
  offert?: string | null
  informations?: string | null
  picture?: string | null
}
export type EventUpdateManyMutationInputInputObject =
  | Extract<keyof EventUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'transport', alias?: string  } 
  | { name: 'appointment', alias?: string  } 
  | { name: 'endInscription', alias?: string  } 
  | { name: 'startInscription', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'offert', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'picture', alias?: string  } 
  
export interface PricesCreateInput {
  id?: string | null
  event?: EventCreateOneWithoutPricesInput
  status?: PricesCreatestatusInput | null
  price?: number
}
export type PricesCreateInputInputObject =
  | Extract<keyof PricesCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'event', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface EventCreateOneWithoutPricesInput {
  create?: EventCreateWithoutPricesInput | null
  connect?: EventWhereUniqueInput | null
}
export type EventCreateOneWithoutPricesInputInputObject =
  | Extract<keyof EventCreateOneWithoutPricesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EventCreateWithoutPricesInput {
  id?: string | null
  name?: string
  location?: string
  transport?: prisma.Transport | null
  appointment?: string
  endInscription?: string
  startInscription?: string
  start?: string
  end?: string
  offert?: string | null
  informations?: string | null
  organizers?: UserCreateManyInput | null
  picture?: string | null
}
export type EventCreateWithoutPricesInputInputObject =
  | Extract<keyof EventCreateWithoutPricesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'transport', alias?: string  } 
  | { name: 'appointment', alias?: string  } 
  | { name: 'endInscription', alias?: string  } 
  | { name: 'startInscription', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'offert', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'organizers', alias?: string  } 
  | { name: 'picture', alias?: string  } 
  
export interface PricesUpdateInput {
  event?: EventUpdateOneRequiredWithoutPricesInput | null
  status?: PricesUpdatestatusInput | null
  price?: number | null
}
export type PricesUpdateInputInputObject =
  | Extract<keyof PricesUpdateInput, string>
  | { name: 'event', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface EventUpdateOneRequiredWithoutPricesInput {
  create?: EventCreateWithoutPricesInput | null
  update?: EventUpdateWithoutPricesDataInput | null
  upsert?: EventUpsertWithoutPricesInput | null
  connect?: EventWhereUniqueInput | null
}
export type EventUpdateOneRequiredWithoutPricesInputInputObject =
  | Extract<keyof EventUpdateOneRequiredWithoutPricesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EventUpdateWithoutPricesDataInput {
  name?: string | null
  location?: string | null
  transport?: prisma.Transport | null
  appointment?: string | null
  endInscription?: string | null
  startInscription?: string | null
  start?: string | null
  end?: string | null
  offert?: string | null
  informations?: string | null
  organizers?: UserUpdateManyInput | null
  picture?: string | null
}
export type EventUpdateWithoutPricesDataInputInputObject =
  | Extract<keyof EventUpdateWithoutPricesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'transport', alias?: string  } 
  | { name: 'appointment', alias?: string  } 
  | { name: 'endInscription', alias?: string  } 
  | { name: 'startInscription', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'offert', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'organizers', alias?: string  } 
  | { name: 'picture', alias?: string  } 
  
export interface EventUpsertWithoutPricesInput {
  update?: EventUpdateWithoutPricesDataInput
  create?: EventCreateWithoutPricesInput
}
export type EventUpsertWithoutPricesInputInputObject =
  | Extract<keyof EventUpsertWithoutPricesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PricesUpdateManyMutationInput {
  status?: PricesUpdatestatusInput | null
  price?: number | null
}
export type PricesUpdateManyMutationInputInputObject =
  | Extract<keyof PricesUpdateManyMutationInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface NewsCreateInput {
  id?: string | null
  title?: string
  date?: string
  content?: string
  event?: EventCreateOneInput
}
export type NewsCreateInputInputObject =
  | Extract<keyof NewsCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'event', alias?: string  } 
  
export interface EventCreateOneInput {
  create?: EventCreateInput | null
  connect?: EventWhereUniqueInput | null
}
export type EventCreateOneInputInputObject =
  | Extract<keyof EventCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NewsUpdateInput {
  title?: string | null
  date?: string | null
  content?: string | null
  event?: EventUpdateOneRequiredInput | null
}
export type NewsUpdateInputInputObject =
  | Extract<keyof NewsUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'event', alias?: string  } 
  
export interface EventUpdateOneRequiredInput {
  create?: EventCreateInput | null
  update?: EventUpdateDataInput | null
  upsert?: EventUpsertNestedInput | null
  connect?: EventWhereUniqueInput | null
}
export type EventUpdateOneRequiredInputInputObject =
  | Extract<keyof EventUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EventUpdateDataInput {
  name?: string | null
  location?: string | null
  transport?: prisma.Transport | null
  appointment?: string | null
  prices?: PricesUpdateManyWithoutEventInput | null
  endInscription?: string | null
  startInscription?: string | null
  start?: string | null
  end?: string | null
  offert?: string | null
  informations?: string | null
  organizers?: UserUpdateManyInput | null
  picture?: string | null
}
export type EventUpdateDataInputInputObject =
  | Extract<keyof EventUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'transport', alias?: string  } 
  | { name: 'appointment', alias?: string  } 
  | { name: 'prices', alias?: string  } 
  | { name: 'endInscription', alias?: string  } 
  | { name: 'startInscription', alias?: string  } 
  | { name: 'start', alias?: string  } 
  | { name: 'end', alias?: string  } 
  | { name: 'offert', alias?: string  } 
  | { name: 'informations', alias?: string  } 
  | { name: 'organizers', alias?: string  } 
  | { name: 'picture', alias?: string  } 
  
export interface EventUpsertNestedInput {
  update?: EventUpdateDataInput
  create?: EventCreateInput
}
export type EventUpsertNestedInputInputObject =
  | Extract<keyof EventUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NewsUpdateManyMutationInput {
  title?: string | null
  date?: string | null
  content?: string | null
}
export type NewsUpdateManyMutationInputInputObject =
  | Extract<keyof NewsUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EventSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EventWhereInput | null
  AND?: EventSubscriptionWhereInput[]
  OR?: EventSubscriptionWhereInput[]
  NOT?: EventSubscriptionWhereInput[]
}
export type EventSubscriptionWhereInputInputObject =
  | Extract<keyof EventSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PricesSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PricesWhereInput | null
  AND?: PricesSubscriptionWhereInput[]
  OR?: PricesSubscriptionWhereInput[]
  NOT?: PricesSubscriptionWhereInput[]
}
export type PricesSubscriptionWhereInputInputObject =
  | Extract<keyof PricesSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NewsSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: NewsWhereInput | null
  AND?: NewsSubscriptionWhereInput[]
  OR?: NewsSubscriptionWhereInput[]
  NOT?: NewsSubscriptionWhereInput[]
}
export type NewsSubscriptionWhereInputInputObject =
  | Extract<keyof NewsSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type SexeValues =
  | 'MALE'
  | 'FEMALE'
  | 'OTHER'
  
export type StatusValues =
  | 'OJ'
  | 'Actif'
  | 'Moniteur'
  | 'Comite'
  | 'Participant'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'street_ASC'
  | 'street_DESC'
  | 'city_ASC'
  | 'city_DESC'
  | 'NPA_ASC'
  | 'NPA_DESC'
  | 'birthday_ASC'
  | 'birthday_DESC'
  | 'sexe_ASC'
  | 'sexe_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TransportValues =
  | 'OWNCAR'
  | 'CAR'
  
export type PricesOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type EventOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'location_ASC'
  | 'location_DESC'
  | 'transport_ASC'
  | 'transport_DESC'
  | 'appointment_ASC'
  | 'appointment_DESC'
  | 'endInscription_ASC'
  | 'endInscription_DESC'
  | 'startInscription_ASC'
  | 'startInscription_DESC'
  | 'start_ASC'
  | 'start_DESC'
  | 'end_ASC'
  | 'end_DESC'
  | 'offert_ASC'
  | 'offert_DESC'
  | 'informations_ASC'
  | 'informations_DESC'
  | 'picture_ASC'
  | 'picture_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type NewsOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  