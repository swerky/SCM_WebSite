### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateEvent {
  count: Int!
}

type AggregateNews {
  count: Int!
}

type AggregatePrices {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Event {
  appointment: String!
  end: DateTime!
  endInscription: DateTime!
  id: ID!
  location: String!
  name: String!
  organizers(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  picture: String!
  prices(after: String, before: String, first: Int, last: Int, orderBy: PricesOrderByInput, skip: Int, where: PricesWhereInput): [Prices!]
  start: DateTime!
  startInscription: DateTime!
  transport: Transport
}

type EventConnection {
  aggregate: AggregateEvent!
  edges: [EventEdge!]!
  pageInfo: PageInfo!
}

input EventCreateInput {
  appointment: String!
  end: DateTime!
  endInscription: DateTime!
  id: ID
  location: String!
  name: String!
  organizers: UserCreateManyInput
  picture: String!
  prices: PricesCreateManyWithoutEventInput
  start: DateTime!
  startInscription: DateTime!
  transport: Transport
}

input EventCreateOneInput {
  connect: EventWhereUniqueInput
  create: EventCreateInput
}

input EventCreateOneWithoutPricesInput {
  connect: EventWhereUniqueInput
  create: EventCreateWithoutPricesInput
}

input EventCreateWithoutPricesInput {
  appointment: String!
  end: DateTime!
  endInscription: DateTime!
  id: ID
  location: String!
  name: String!
  organizers: UserCreateManyInput
  picture: String!
  start: DateTime!
  startInscription: DateTime!
  transport: Transport
}

type EventEdge {
  cursor: String!
  node: Event!
}

enum EventOrderByInput {
  appointment_ASC
  appointment_DESC
  createdAt_ASC
  createdAt_DESC
  end_ASC
  end_DESC
  endInscription_ASC
  endInscription_DESC
  id_ASC
  id_DESC
  location_ASC
  location_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  start_ASC
  start_DESC
  startInscription_ASC
  startInscription_DESC
  transport_ASC
  transport_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EventUpdateDataInput {
  appointment: String
  end: DateTime
  endInscription: DateTime
  location: String
  name: String
  organizers: UserUpdateManyInput
  picture: String
  prices: PricesUpdateManyWithoutEventInput
  start: DateTime
  startInscription: DateTime
  transport: Transport
}

input EventUpdateInput {
  appointment: String
  end: DateTime
  endInscription: DateTime
  location: String
  name: String
  organizers: UserUpdateManyInput
  picture: String
  prices: PricesUpdateManyWithoutEventInput
  start: DateTime
  startInscription: DateTime
  transport: Transport
}

input EventUpdateManyMutationInput {
  appointment: String
  end: DateTime
  endInscription: DateTime
  location: String
  name: String
  picture: String
  start: DateTime
  startInscription: DateTime
  transport: Transport
}

input EventUpdateOneRequiredInput {
  connect: EventWhereUniqueInput
  create: EventCreateInput
  update: EventUpdateDataInput
  upsert: EventUpsertNestedInput
}

input EventUpdateOneRequiredWithoutPricesInput {
  connect: EventWhereUniqueInput
  create: EventCreateWithoutPricesInput
  update: EventUpdateWithoutPricesDataInput
  upsert: EventUpsertWithoutPricesInput
}

input EventUpdateWithoutPricesDataInput {
  appointment: String
  end: DateTime
  endInscription: DateTime
  location: String
  name: String
  organizers: UserUpdateManyInput
  picture: String
  start: DateTime
  startInscription: DateTime
  transport: Transport
}

input EventUpsertNestedInput {
  create: EventCreateInput!
  update: EventUpdateDataInput!
}

input EventUpsertWithoutPricesInput {
  create: EventCreateWithoutPricesInput!
  update: EventUpdateWithoutPricesDataInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  appointment: String
  appointment_contains: String
  appointment_ends_with: String
  appointment_gt: String
  appointment_gte: String
  appointment_in: [String!]
  appointment_lt: String
  appointment_lte: String
  appointment_not: String
  appointment_not_contains: String
  appointment_not_ends_with: String
  appointment_not_in: [String!]
  appointment_not_starts_with: String
  appointment_starts_with: String
  end: DateTime
  end_gt: DateTime
  end_gte: DateTime
  end_in: [DateTime!]
  end_lt: DateTime
  end_lte: DateTime
  end_not: DateTime
  end_not_in: [DateTime!]
  endInscription: DateTime
  endInscription_gt: DateTime
  endInscription_gte: DateTime
  endInscription_in: [DateTime!]
  endInscription_lt: DateTime
  endInscription_lte: DateTime
  endInscription_not: DateTime
  endInscription_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  location: String
  location_contains: String
  location_ends_with: String
  location_gt: String
  location_gte: String
  location_in: [String!]
  location_lt: String
  location_lte: String
  location_not: String
  location_not_contains: String
  location_not_ends_with: String
  location_not_in: [String!]
  location_not_starts_with: String
  location_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  organizers_every: UserWhereInput
  organizers_none: UserWhereInput
  organizers_some: UserWhereInput
  picture: String
  picture_contains: String
  picture_ends_with: String
  picture_gt: String
  picture_gte: String
  picture_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_not: String
  picture_not_contains: String
  picture_not_ends_with: String
  picture_not_in: [String!]
  picture_not_starts_with: String
  picture_starts_with: String
  prices_every: PricesWhereInput
  prices_none: PricesWhereInput
  prices_some: PricesWhereInput
  start: DateTime
  start_gt: DateTime
  start_gte: DateTime
  start_in: [DateTime!]
  start_lt: DateTime
  start_lte: DateTime
  start_not: DateTime
  start_not_in: [DateTime!]
  startInscription: DateTime
  startInscription_gt: DateTime
  startInscription_gte: DateTime
  startInscription_in: [DateTime!]
  startInscription_lt: DateTime
  startInscription_lte: DateTime
  startInscription_not: DateTime
  startInscription_not_in: [DateTime!]
  transport: Transport
  transport_in: [Transport!]
  transport_not: Transport
  transport_not_in: [Transport!]
}

input EventWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  createNews(data: NewsCreateInput!): News!
  createPrices(data: PricesCreateInput!): Prices!
  createUser(data: UserCreateInput!): User!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyNewses(where: NewsWhereInput): BatchPayload!
  deleteManyPriceses(where: PricesWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteNews(where: NewsWhereUniqueInput!): News
  deletePrices(where: PricesWhereUniqueInput!): Prices
  deleteUser(where: UserWhereUniqueInput!): User
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyNewses(data: NewsUpdateManyMutationInput!, where: NewsWhereInput): BatchPayload!
  updateManyPriceses(data: PricesUpdateManyMutationInput!, where: PricesWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateNews(data: NewsUpdateInput!, where: NewsWhereUniqueInput!): News
  updatePrices(data: PricesUpdateInput!, where: PricesWhereUniqueInput!): Prices
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  upsertNews(create: NewsCreateInput!, update: NewsUpdateInput!, where: NewsWhereUniqueInput!): News!
  upsertPrices(create: PricesCreateInput!, update: PricesUpdateInput!, where: PricesWhereUniqueInput!): Prices!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type News {
  content: String!
  date: DateTime!
  event: Event!
  id: ID!
  title: String!
}

type NewsConnection {
  aggregate: AggregateNews!
  edges: [NewsEdge!]!
  pageInfo: PageInfo!
}

input NewsCreateInput {
  content: String!
  date: DateTime!
  event: EventCreateOneInput!
  id: ID
  title: String!
}

type NewsEdge {
  cursor: String!
  node: News!
}

enum NewsOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input NewsUpdateInput {
  content: String
  date: DateTime
  event: EventUpdateOneRequiredInput
  title: String
}

input NewsUpdateManyMutationInput {
  content: String
  date: DateTime
  title: String
}

input NewsWhereInput {
  AND: [NewsWhereInput!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  date: DateTime
  date_gt: DateTime
  date_gte: DateTime
  date_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_not: DateTime
  date_not_in: [DateTime!]
  event: EventWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [NewsWhereInput!]
  OR: [NewsWhereInput!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

input NewsWhereUniqueInput {
  id: ID
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Prices {
  event: Event!
  id: ID!
  price: Float!
  status: [Status!]!
}

type PricesConnection {
  aggregate: AggregatePrices!
  edges: [PricesEdge!]!
  pageInfo: PageInfo!
}

input PricesCreateInput {
  event: EventCreateOneWithoutPricesInput!
  id: ID
  price: Float!
  status: PricesCreatestatusInput
}

input PricesCreateManyWithoutEventInput {
  connect: [PricesWhereUniqueInput!]
  create: [PricesCreateWithoutEventInput!]
}

input PricesCreatestatusInput {
  set: [Status!]
}

input PricesCreateWithoutEventInput {
  id: ID
  price: Float!
  status: PricesCreatestatusInput
}

type PricesEdge {
  cursor: String!
  node: Prices!
}

enum PricesOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PricesScalarWhereInput {
  AND: [PricesScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PricesScalarWhereInput!]
  OR: [PricesScalarWhereInput!]
  price: Float
  price_gt: Float
  price_gte: Float
  price_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_not: Float
  price_not_in: [Float!]
}

input PricesUpdateInput {
  event: EventUpdateOneRequiredWithoutPricesInput
  price: Float
  status: PricesUpdatestatusInput
}

input PricesUpdateManyDataInput {
  price: Float
  status: PricesUpdatestatusInput
}

input PricesUpdateManyMutationInput {
  price: Float
  status: PricesUpdatestatusInput
}

input PricesUpdateManyWithoutEventInput {
  connect: [PricesWhereUniqueInput!]
  create: [PricesCreateWithoutEventInput!]
  delete: [PricesWhereUniqueInput!]
  deleteMany: [PricesScalarWhereInput!]
  disconnect: [PricesWhereUniqueInput!]
  set: [PricesWhereUniqueInput!]
  update: [PricesUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [PricesUpdateManyWithWhereNestedInput!]
  upsert: [PricesUpsertWithWhereUniqueWithoutEventInput!]
}

input PricesUpdateManyWithWhereNestedInput {
  data: PricesUpdateManyDataInput!
  where: PricesScalarWhereInput!
}

input PricesUpdatestatusInput {
  set: [Status!]
}

input PricesUpdateWithoutEventDataInput {
  price: Float
  status: PricesUpdatestatusInput
}

input PricesUpdateWithWhereUniqueWithoutEventInput {
  data: PricesUpdateWithoutEventDataInput!
  where: PricesWhereUniqueInput!
}

input PricesUpsertWithWhereUniqueWithoutEventInput {
  create: PricesCreateWithoutEventInput!
  update: PricesUpdateWithoutEventDataInput!
  where: PricesWhereUniqueInput!
}

input PricesWhereInput {
  AND: [PricesWhereInput!]
  event: EventWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PricesWhereInput!]
  OR: [PricesWhereInput!]
  price: Float
  price_gt: Float
  price_gte: Float
  price_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_not: Float
  price_not_in: [Float!]
}

input PricesWhereUniqueInput {
  id: ID
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(after: String, before: String, first: Int, last: Int, orderBy: EventOrderByInput, skip: Int, where: EventWhereInput): [Event!]!
  eventsConnection(after: String, before: String, first: Int, last: Int, orderBy: EventOrderByInput, skip: Int, where: EventWhereInput): EventConnection!
  news(where: NewsWhereUniqueInput!): News
  newses(after: String, before: String, first: Int, last: Int, orderBy: NewsOrderByInput, skip: Int, where: NewsWhereInput): [News!]!
  newsesConnection(after: String, before: String, first: Int, last: Int, orderBy: NewsOrderByInput, skip: Int, where: NewsWhereInput): NewsConnection!
  prices(where: PricesWhereUniqueInput!): Prices
  priceses(after: String, before: String, first: Int, last: Int, orderBy: PricesOrderByInput, skip: Int, where: PricesWhereInput): [Prices!]!
  pricesesConnection(after: String, before: String, first: Int, last: Int, orderBy: PricesOrderByInput, skip: Int, where: PricesWhereInput): PricesConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

enum Sexe {
  FEMALE
  MALE
  OTHER
}

enum Status {
  Actif
  Comite
  Moniteur
  OJ
  Participant
}

enum Transport {
  CAR
  OWNCAR
}

type User {
  birthday: DateTime!
  city: String!
  createDate: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  NPA: Int!
  sexe: Sexe
  status: [Status!]!
  street: String!
  updateDate: DateTime!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  birthday: DateTime!
  city: String!
  createDate: DateTime!
  email: String!
  firstName: String!
  id: ID
  lastName: String!
  NPA: Int!
  sexe: Sexe
  status: UserCreatestatusInput
  street: String!
  updateDate: DateTime!
}

input UserCreateManyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
}

input UserCreatestatusInput {
  set: [Status!]
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  birthday_ASC
  birthday_DESC
  city_ASC
  city_DESC
  createdAt_ASC
  createdAt_DESC
  createDate_ASC
  createDate_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  NPA_ASC
  NPA_DESC
  sexe_ASC
  sexe_DESC
  street_ASC
  street_DESC
  updatedAt_ASC
  updatedAt_DESC
  updateDate_ASC
  updateDate_DESC
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  birthday: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  birthday_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_not: DateTime
  birthday_not_in: [DateTime!]
  city: String
  city_contains: String
  city_ends_with: String
  city_gt: String
  city_gte: String
  city_in: [String!]
  city_lt: String
  city_lte: String
  city_not: String
  city_not_contains: String
  city_not_ends_with: String
  city_not_in: [String!]
  city_not_starts_with: String
  city_starts_with: String
  createDate: DateTime
  createDate_gt: DateTime
  createDate_gte: DateTime
  createDate_in: [DateTime!]
  createDate_lt: DateTime
  createDate_lte: DateTime
  createDate_not: DateTime
  createDate_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_gt: String
  firstName_gte: String
  firstName_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String!]
  firstName_not_starts_with: String
  firstName_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastName: String
  lastName_contains: String
  lastName_ends_with: String
  lastName_gt: String
  lastName_gte: String
  lastName_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_not: String
  lastName_not_contains: String
  lastName_not_ends_with: String
  lastName_not_in: [String!]
  lastName_not_starts_with: String
  lastName_starts_with: String
  NOT: [UserScalarWhereInput!]
  NPA: Int
  NPA_gt: Int
  NPA_gte: Int
  NPA_in: [Int!]
  NPA_lt: Int
  NPA_lte: Int
  NPA_not: Int
  NPA_not_in: [Int!]
  OR: [UserScalarWhereInput!]
  sexe: Sexe
  sexe_in: [Sexe!]
  sexe_not: Sexe
  sexe_not_in: [Sexe!]
  street: String
  street_contains: String
  street_ends_with: String
  street_gt: String
  street_gte: String
  street_in: [String!]
  street_lt: String
  street_lte: String
  street_not: String
  street_not_contains: String
  street_not_ends_with: String
  street_not_in: [String!]
  street_not_starts_with: String
  street_starts_with: String
  updateDate: DateTime
  updateDate_gt: DateTime
  updateDate_gte: DateTime
  updateDate_in: [DateTime!]
  updateDate_lt: DateTime
  updateDate_lte: DateTime
  updateDate_not: DateTime
  updateDate_not_in: [DateTime!]
}

input UserUpdateDataInput {
  birthday: DateTime
  city: String
  createDate: DateTime
  email: String
  firstName: String
  lastName: String
  NPA: Int
  sexe: Sexe
  status: UserUpdatestatusInput
  street: String
  updateDate: DateTime
}

input UserUpdateInput {
  birthday: DateTime
  city: String
  createDate: DateTime
  email: String
  firstName: String
  lastName: String
  NPA: Int
  sexe: Sexe
  status: UserUpdatestatusInput
  street: String
  updateDate: DateTime
}

input UserUpdateManyDataInput {
  birthday: DateTime
  city: String
  createDate: DateTime
  email: String
  firstName: String
  lastName: String
  NPA: Int
  sexe: Sexe
  status: UserUpdatestatusInput
  street: String
  updateDate: DateTime
}

input UserUpdateManyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  birthday: DateTime
  city: String
  createDate: DateTime
  email: String
  firstName: String
  lastName: String
  NPA: Int
  sexe: Sexe
  status: UserUpdatestatusInput
  street: String
  updateDate: DateTime
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdatestatusInput {
  set: [Status!]
}

input UserUpdateWithWhereUniqueNestedInput {
  data: UserUpdateDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  create: UserCreateInput!
  update: UserUpdateDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  birthday: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  birthday_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_not: DateTime
  birthday_not_in: [DateTime!]
  city: String
  city_contains: String
  city_ends_with: String
  city_gt: String
  city_gte: String
  city_in: [String!]
  city_lt: String
  city_lte: String
  city_not: String
  city_not_contains: String
  city_not_ends_with: String
  city_not_in: [String!]
  city_not_starts_with: String
  city_starts_with: String
  createDate: DateTime
  createDate_gt: DateTime
  createDate_gte: DateTime
  createDate_in: [DateTime!]
  createDate_lt: DateTime
  createDate_lte: DateTime
  createDate_not: DateTime
  createDate_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_gt: String
  firstName_gte: String
  firstName_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String!]
  firstName_not_starts_with: String
  firstName_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  lastName: String
  lastName_contains: String
  lastName_ends_with: String
  lastName_gt: String
  lastName_gte: String
  lastName_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_not: String
  lastName_not_contains: String
  lastName_not_ends_with: String
  lastName_not_in: [String!]
  lastName_not_starts_with: String
  lastName_starts_with: String
  NOT: [UserWhereInput!]
  NPA: Int
  NPA_gt: Int
  NPA_gte: Int
  NPA_in: [Int!]
  NPA_lt: Int
  NPA_lte: Int
  NPA_not: Int
  NPA_not_in: [Int!]
  OR: [UserWhereInput!]
  sexe: Sexe
  sexe_in: [Sexe!]
  sexe_not: Sexe
  sexe_not_in: [Sexe!]
  street: String
  street_contains: String
  street_ends_with: String
  street_gt: String
  street_gte: String
  street_in: [String!]
  street_lt: String
  street_lte: String
  street_not: String
  street_not_contains: String
  street_not_ends_with: String
  street_not_in: [String!]
  street_not_starts_with: String
  street_starts_with: String
  updateDate: DateTime
  updateDate_gt: DateTime
  updateDate_gte: DateTime
  updateDate_in: [DateTime!]
  updateDate_lt: DateTime
  updateDate_lte: DateTime
  updateDate_not: DateTime
  updateDate_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
